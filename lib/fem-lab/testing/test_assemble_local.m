function correct = test_assemble_local()    % Test whether sm_assemble_local delivers correct values by testing a special case.     % We will consider polynomial degree 1 and mesh size 0.5 and hardcode the solution for that case.    % correct will be a matrix, which will contain 0 and 1. If the entry is 0 at (i,j), it means the matrix delivered by     % sm_assemble_local is not correct at (i,j), otherwise it is correct.    % If all entries are 1 output instead of the whole matrix just a 1.        % Initialize correct matrix    correct = zeros(4,4);        % Calculate local matrix assembled by the function to be tested.    local_stiffness_generated = sm_assemble_local_vectorized(0.5,sf_generate(1));        % Initialize Gauss Quadratur    [sample_points,weights] = int_gauss_weights(2,0,0.5);        % ---- Hardcode solution ----        % First Element in a mesh with mesh_size 0.5    shape_function_1 = [1,-2,-2,4;0,2,0,-4;0,0,2,-4;0,0,0,4];            % Initialize stiffness matrix for the hardcoded solution    local_stiffness_matrix = zeros(4,4);        % Calculate stiffness_matrix for the hardcoded solution    cell_matrix = mesh_nodes(0.5,1);    for i=1:4        for j=1:4            value = 0;            % Element with side length 0.5             shape_function_i = shape_function_1(i,:);            shape_function_j = shape_function_1(j,:);            [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);            [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);            f = @(x,y) hf_eval_poly(x,y,shape_function_i).* hf_eval_poly(x,y,shape_function_j);            h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).* hf_eval_poly(x,y,dx_shape_function_j) ;            h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;            value = value +  int_gauss(sample_points,weights,sample_points,weights,f) + int_gauss(sample_points,weights,sample_points,weights,h_1) + int_gauss(sample_points,weights,sample_points,weights,h_2);            local_stiffness_matrix(i,j) = value;          endfor    endfor    % -------- Local stiffness matrix is now hardcoded --------        % Compare values in each entry        for i=1:4        for j=1:4            % Check if values are equal            if( abs(local_stiffness_matrix(i,j)-local_stiffness_generated(i,j)) < 0.01 )                 % Correct Matrix should be 1 at that position, if values are equal.                correct(i,j) = 1;            endif        endfor    endfor        % If every value is correct output 1 instead of whole matrix    test = 1;    for i=1:4        for j=1:4            if( correct(i,j) == 0 )                 test = 0;            endif        endfor    endfor    if ( test == 1 )        correct = 1;    endifendfunction