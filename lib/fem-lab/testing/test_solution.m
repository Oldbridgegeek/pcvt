function correct = test_solution()    % We want to test whether the idea and the algorithms behind our problem solver work properly.    % Therefore we decided to hardcode the solution for the given problem with mesh size 0.5 and polynomial degree 1 and see    % if we get the same results, as when we would use our functions to compute the solution for the given problem.    % correct is a vector containing either 1 or 0. If at the i-th position of correct there is a 0 it means the generated solution vector    % has an error at position i otherwise value is correct.    % If all entries are 1 output instead of the whole vector just a 1.        % ---- Hardcode solution -------    addpath([pwd '/../bin'])    % Step 0) Setting and Initializations for stiffness matrix        % Initialize Gauss quadratures nodes and weights    [x_1,w_1] = int_gauss_weights(2,0,0.5);    [x_2,w_2] = int_gauss_weights(2,0.5,1);    % Initialize stiffness matrix    stiffness_matrix = zeros(9,9);    % Generate cell matrix    cell_matrix = mesh_nodes(0.5,1);            % Step 1) Define shape functions on each element.        % 1. Element    shape_function_1 = [1,-2,-2,4;0,2,0,-4;0,0,2,-4;0,0,0,4];       % 2. Element    shape_function_2 = [2,-2,-4,4;-1,2,2,-4;0,0,4,-4;0,0,-2,4];    % 3. Element    shape_function_3 = [2,-4,-2,4;0,4,0,-4;-1,2,2,-4;0,-2,0,4];    % 4. Element    shape_function_4 = [4,-4,-4,4;-2,4,2,-4;-2,2,4,-4;1,-2,-2,4];        % Step 2) Compute entries of the stiffness matrix.        for i=1:9        for j=1:9            value = 0;            % 1. Element            if ( mesh_renumber(cell_matrix,1,i) != 0 && mesh_renumber(cell_matrix,1,j) != 0 )                shape_function_i = shape_function_1(mesh_renumber(cell_matrix,1,i),:);                shape_function_j = shape_function_1(mesh_renumber(cell_matrix,1,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                % value = value +  dblquad(f,0,0.5,0,0.5) + dblquad(h_1,0,0.5,0,0.5) + dblquad(h_2,0,0.5,0,0.5);                value = value + int_gauss_vectorized(x_1,w_1,x_1,w_1,f) + int_gauss_vectorized(x_1,w_1,x_1,w_1,h_1) + int_gauss_vectorized(x_1,w_1,x_1,w_1,h_2);            endif                        % 2. Element            if ( mesh_renumber(cell_matrix,2,i) != 0 && mesh_renumber(cell_matrix,2,j) != 0 )                shape_function_i = shape_function_2(mesh_renumber(cell_matrix,2,i),:);                shape_function_j = shape_function_2(mesh_renumber(cell_matrix,2,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                % value = value +  dblquad(f,0.5,1,0,0.5) + dblquad(h_1,0.5,1,0,0.5) + dblquad(h_2,0.5,1,0,0.5);                value = value + int_gauss_vectorized(x_2,w_2,x_1,w_1,f) + int_gauss_vectorized(x_2,w_2,x_1,w_1,h_1) + int_gauss_vectorized(x_2,w_2,x_1,w_1,h_2);            endif                        % 3. Element            if ( mesh_renumber(cell_matrix,3,i) != 0 && mesh_renumber(cell_matrix,3,j) != 0 )                shape_function_i = shape_function_3(mesh_renumber(cell_matrix,3,i),:);                shape_function_j = shape_function_3(mesh_renumber(cell_matrix,3,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                % value = value +  dblquad(f,0,0.5,0.5,1) + dblquad(h_1,0,0.5,0.5,1) + dblquad(h_2,0,0.5,0.5,1);                value = value + int_gauss_vectorized(x_1,w_1,x_2,w_2,f) + int_gauss_vectorized(x_1,w_1,x_2,w_2,h_1) + int_gauss_vectorized(x_1,w_1,x_2,w_2,h_2);            endif                        % 4. Element            if ( mesh_renumber(cell_matrix,4,i) != 0 && mesh_renumber(cell_matrix,4,j) != 0 )                shape_function_i = shape_function_4(mesh_renumber(cell_matrix,4,i),:);                shape_function_j = shape_function_4(mesh_renumber(cell_matrix,4,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                % value = value +  dblquad(f,0.5,1,0.5,1) + dblquad(h_1,0.5,1,0.5,1) + dblquad(h_2,0.5,1,0.5,1);                value = value + int_gauss_vectorized(x_2,w_2,x_2,w_2,f) + int_gauss_vectorized(x_2,w_2,x_2,w_2,h_1) + int_gauss_vectorized(x_2,w_2,x_2,w_2,h_2);            endif                        stiffness_matrix(i,j) = value;          endfor    endfor     % Step 3) Setting and Initializations for right hand side.        % Initialize Gauss quadratures nodes and weights for right hand side    [x_1,w_1] = int_gauss_weights(10,0,0.5);    [x_2,w_2] = int_gauss_weights(10,0.5,1);        % Initialize right hand side    rhs = zeros(9,1);        % Step 4) Compute the entries of the right hand side vector.        % -- First node --    shape_function_T1 = shape_function_1(1,:);    f_1 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T1);    %rhs(1) = dblquad(f_1,0,0.5,0,0.5);    rhs(1) = int_gauss_vectorized(x_1,w_1,x_1,w_1,f_1);        % -- Second node --    shape_function_T1 = shape_function_1(2,:);    shape_function_T2 = shape_function_2(1,:);    f_1 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T1);    f_2 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T2);    %rhs(2) = dblquad(f_1,0,0.5,0,0.5) + dblquad(f_2,0.5,1,0,0.5);    rhs(2) = int_gauss_vectorized(x_1,w_1,x_1,w_1,f_1) + int_gauss_vectorized(x_2,w_2,x_1,w_1,f_2);        % --Third node --    shape_function_T2 = shape_function_2(2,:);    f = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T2);    %rhs(3) = dblquad(f,0.5,1,0,0.5);    rhs(3) = int_gauss_vectorized(x_2,w_2,x_1,w_1,f);        % -- Fourth node --    shape_function_T1 = shape_function_1(3,:);    shape_function_T3 = shape_function_3(1,:);    f_1 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T1);    f_3 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T3);    %rhs(4) = dblquad(f_1,0,0.5,0,0.5) + dblquad(f_3,0,0.5,0.5,1);    rhs(4) = int_gauss_vectorized(x_1,w_1,x_1,w_1,f_1) + int_gauss_vectorized(x_1,w_1,x_2,w_2,f_3);        % -- Fifth node --    shape_function_T1 = shape_function_1(4,:);    shape_function_T2 = shape_function_2(3,:);    shape_function_T3 = shape_function_3(2,:);    shape_function_T4 = shape_function_4(1,:);    f_1 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T1);    f_2 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T2);    f_3 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T3);    f_4 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T4);    %rhs(5) = dblquad(f_1,0,0.5,0,0.5) + dblquad(f_3,0,0.5,0.5,1) + dblquad(f_2,0.5,1,0,0.5) + dblquad(f_4,0.5,1,0.5,1);    rhs(5) = int_gauss_vectorized(x_1,w_1,x_1,w_1,f_1) + int_gauss_vectorized(x_1,w_1,x_2,w_2,f_3) + int_gauss_vectorized(x_2,w_2,x_1,w_1,f_2) + int_gauss_vectorized(x_2,w_2,x_2,w_2,f_4);        % -- Sixth node --    shape_function_T2 = shape_function_2(4,:);    shape_function_T4 = shape_function_4(2,:);    f_2 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T2);    f_4 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T4);    %rhs(6) = dblquad(f_2,0.5,1,0,0.5) + dblquad(f_4,0.5,1,0.5,1);    rhs(6) = int_gauss_vectorized(x_2,w_2,x_1,w_1,f_2) + int_gauss_vectorized(x_2,w_2,x_2,w_2,f_4);    % -- Seventh node --    shape_function_T3 = shape_function_3(3,:);    f_3 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T3);    %rhs(7) = dblquad(f_3,0,0.5,0.5,1);    rhs(7) = int_gauss_vectorized(x_1,w_1,x_2,w_2,f_3);    % -- Eigth node --    shape_function_T3 = shape_function_3(4,:);    shape_function_T4 = shape_function_4(3,:);    f_3 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T3);    f_4 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T4);    %rhs(8) = dblquad(f_3,0,0.5,0.5,1) + dblquad(f_4,0.5,1,0.5,1);    rhs(8) = int_gauss_vectorized(x_1,w_1,x_2,w_2,f_3) + int_gauss_vectorized(x_2,w_2,x_2,w_2,f_4);    % -- Ninth node --    shape_function_T4 = shape_function_4(4,:);    f_4 = @(x,y) cos(pi.*x).*cos(pi.*y).*hf_eval_poly(x,y,shape_function_T4);    %rhs(9) = dblquad(f_4,0.5,1,0.5,1);    rhs(9) = int_gauss_vectorized(x_2,w_2,x_2,w_2,f_4);            % Step 5 ) Solve linear system for hardcoded solution    solution_hard = stiffness_matrix \ rhs ;        % ---------------------------------------------------------------------------------------------------        % ------ Generate solution by our functions and algorithms -------    % Step 1) Generate mesh    [vertex,cell] = mesh_generate(0.5);    % Step 2) Generate shape functions    SF = sf_generate(1);    % Step 3) Compute global stiffness matrix    SM_local=sm_assemble_local_vectorized(0.5,SF);    SM = sm_assemble_global(0.5,1,SM_local);    % Step 4) Compute right hand side    rhs = rhs_integration_vectorized(vertex,cell,SF,@(x,y) cos(pi.*x).*cos(pi.*y));    % Step 5) Solve linear system     solution = SM \ rhs ;    % ----------------------------------------------------------------       % ---------- Compare hardcoded and generated solutions -----------    correct = zeros(9,1);    for i=1:9        if (abs(solution(i) - solution_hard(i)) < 10^(-6))            correct(i) = 1;        endif    endfor    % -----------------------------------------------------------------        % If everything is correct output just a 1 instead of the whole correct vector    test = 1;    for i=1:9        if( correct(i) == 0 )            test = 0;        endif    endfor    if( test == 1 )        correct = 1;    endif    endfunction