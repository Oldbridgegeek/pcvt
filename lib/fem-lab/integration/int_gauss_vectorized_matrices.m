function val = int_gauss_vectorized_matrices(x_1,w_1,x_2,w_2,f)     % this integration shall work even for matrix valued functions.    % this will determine the dimension of the image of f    [sub_rows,sub_columns]=size(f(0,0));    % in octave, a function with real numbers as input will also work with a matrix as input.    % octave will interpret it as component-wise function    % if a function is also matrix valued, it will return a matrix for each entry, thus resulting in an even bigger matrix        % for real valued functions, our function would compute a matrix with all values given by the gauss quadrature points and weights    % it remains to sum up over every matrix entry    % problem: matrix valued functions should compute the sum of each submatrix, a sum over all matrix entrys would only return one value.        % we want to sum up only over the submatrices        % size of matrix for each entry in the image    m=length(x_1);        % Initialize matrices: one entry of X_1 and X_2 is exactly one possible combination of the quadrature points.     % computing f(X_1,X_2) will result in a matrix, with a value for each combination    % Same principle applies to gauss weights    [X_1,X_2]=meshgrid(x_1,x_2);    [W_1,W_2]=meshgrid(w_1,w_2);        % Octave's function 'repmat' will build a matrix, using a given matrix as building blocks    % Since one submatrix corresponds to one quadrature, we need to apply the gauss weights to each submatrix        value_matrix=f(X_1,X_2).*repmat(W_2,sub_rows,sub_columns).*repmat(W_1,sub_rows,sub_columns);        % The following matrices will give us the wanted quadrature (see additional comments).    % aux_matrix_1 will sum each row of each submatrix    % aux_matrix_2 will sum the remaining row of each submatrix    aux_matrix_1=repmat(eye(sub_columns),m,1);    aux_matrix_1=sortrows(aux_matrix_1,-1*[1:sub_columns]);        aux_matrix_2=repmat(eye(sub_rows),m,1);    aux_matrix_2=sortrows(aux_matrix_2,-1*[1:sub_rows]);            sum_rows=(value_matrix*aux_matrix_1)';    val=(sum_rows*aux_matrix_2)';        endfunction