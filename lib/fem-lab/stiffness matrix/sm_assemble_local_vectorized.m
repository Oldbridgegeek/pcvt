function SM_local = sm_assemble_local_vectorized(mesh_size,SF)    % This script should compute the entries of the local stiffnes matrix with optimized runtime.    % Initialize Gauss Quadratur    pol_deg= sqrt(length(SF))-1;    order=pol_deg+1;    [sample_points,weights] = int_gauss_weights(order,0,1);    % Calculate derivates of shape functions    [dx_SF,dy_SF]= sf_derivate(SF);        % Initialize local stiffness matrix with zeros in all entries    SM_local = zeros(length(SF),length(SF));        % Initialize function, further explained in additional comments    f= @(x,y) mesh_size*mesh_size*repmat(hf_eval_poly(x,y,SF),1,length(SF)).*repmat(hf_eval_poly(y,x,SF)',length(SF),1) + repmat(hf_eval_poly(x,y,dy_SF),1,length(SF)).*repmat(hf_eval_poly(y,x,dy_SF)',length(SF),1) + repmat(hf_eval_poly(x,y,dx_SF),1,length(SF)).*repmat(hf_eval_poly(y,x,dx_SF)',length(SF),1);        % Gauss quadrature    % Which is exact for polynomials up to order 2n-1    SM_local = int_gauss_vectorized_matrices(sample_points,weights,sample_points,weights,f);        endfunction