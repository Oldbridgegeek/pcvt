function predicted_l2_error = error_runge(mesh_size, pol_deg, u_coeff)    % --- Acknowledgments ---    % 'A posteriori analysis for PDE's' by S. Repin, Page 60    % Document can be found here: https://math.aalto.fi/opetus/lme/ApostPDERepin.pdf    % -----------------------        % The Goal of that function is to show that the old fashioned error estimator from C. Runge is actually a good error estimator for our    % case. Therefore we want to have a sequence of mesh sizes like    % (mesh_size, mesh_size/2, mesh_size/4, mesh_size/8, ...)     % and show that the solution is converging with decreasing mesh size.    % So we want to show computationally that the sequence of solutions with decreasing mesh sizes is a cauchy sequence.    % Also we want to show that the convergence order is similar to the convergence order of the L2 error with the analytical solution    % converging to 0 with decreasing mesh size.        % Initialize vertex,cell and shape function matrices for evaluating the solution and solving FEM    [Vertex,Cell]=mesh_generate(mesh_size);    [Vertex_2,Cell_2]=mesh_generate(mesh_size/2);    SF = sf_generate(pol_deg);        % Compute solution for mesh_size/2    SM_local=sm_assemble_local_vectorized(mesh_size/2,SF);    SM =sm_assemble_global(mesh_size/2,pol_deg,SM_local);    f = @(x,y) cos(x*pi).*cos(y*pi);    rhs=rhs_integration_vectorized(Vertex_2,Cell_2,SF,f);    u_coeff_2 = ls_solve(SM,rhs);        % Define functions with the two solutions.    u_1=@(x,y) hf_eval_solution(x,y,u_coeff,Cell,Vertex,pol_deg,SF);    u_2=@(x,y) hf_eval_solution(x,y,u_coeff_2,Cell_2,Vertex_2,pol_deg,SF);    % Compute difference of solution with mesh size = mesh_size and solution with mesh size = mesh_size/2;    predicted_l2_error = error_L2(u_1, u_2, 10);endfunction   