function index = hf_exponent_to_column(x_exponent,y_exponent)    % This script is necessary for the evaluation of our polynomials with the specific ordering we designed for this program.    % As input we need here the exponent of x and the exponent of y and the script will tell us which position at the coefficient vector    % we can find those x and y.    % Example: Inputs are x_exponent = 0 and y_exponent = 1. *    % Recapitulate ordering:     % 1. x^0 * y^0    % 2. x^1 * y^0    % 3. x^0 * y^1      <------- x_exponent = 0 and y_exponent = 1 *    % 4. x^1 * y^1    % and so on.    % We already see that the script will give us as index = 3.        max_combinations = factorial(x_exponent)*factorial(y_exponent)+10;         % Initialize matrix data_set which contains in the first column the exponent of x and in the 2nd column the exponent of y.    % The third column represents the number in the order we are using for the basis of the polynomials.    data_set = zeros(max_combinations,3);        % Counter in the order of the basis of the polynomials    j=1;         % level is a necessary helper variable to loop through the basis of the polynomial.    level=0;     % level could be described as highest exponent allowed at a time.        % Loop through ordering of basis     while j<max_combinations        exponent_x=level;        exponent_y=0;        while(exponent_y < level)            data_set(j,:) = [exponent_x , exponent_y, j];            exponent_y++;            j++;        endwhile        exponent_x = 0;        exponent_y = level;        while(exponent_x < level)            data_set(j,:) = [exponent_x , exponent_y, j];            exponent_x++;            j++;        endwhile        data_set(j,:)=[level,level,j];        level++;        j++;    endwhile        % Check where x_exponent is in data_set    for i=1:length(data_set)        if(x_exponent == data_set(i,1))            % Check if y_exponent fits also.            if(y_exponent == data_set(i,2))                break;            endif        endif    endfor        index = data_set(i,3);    endfunction