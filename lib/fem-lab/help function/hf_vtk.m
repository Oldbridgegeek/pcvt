function hf_vtk(matrix, filename)    % This script writes a 3D matrix as a VTK file.    % The input matrix must be 3D and the filename should be a string.    % We want to model with the help of that function and paraview the convergence of the approximation to the analytical solution    % with increasing polynomial degree and decreasing mesh size.        % Compute matrix dimensions.    [N M O] = size(matrix);    % Get the maximum value for the normalisation.    mx = max(matrix(:));    % Open file for editing    fid = fopen(filename, 'w');    if fid == -1        error('Cannot open file for writing.');    end    % New line.    nl = sprintf('\n');    % Write the file header.    fwrite(fid, ['# vtk DataFile Version 2.0' nl 'Volume example' nl 'ASCII' nl ...    'DATASET STRUCTURED_POINTS' nl 'DIMENSIONS ' ...    num2str(N) ' ' num2str(M) ' ' num2str(O) nl 'ASPECT_RATIO 1 1 1' nl ...    'ORIGIN 0 0 0' nl 'POINT_DATA ' ...    num2str(N*M*O) nl 'SCALARS volume_scalars char 1' nl 'LOOKUP_TABLE default' nl]);    % Write matrix data into the file    for z = 1:O        % Get layer.        v = matrix(:, :, z);        % Scale it. This assumes there are no negative numbers.        v = round(100 .* v(:) ./ mx);        % Write the values as text numbers.        fwrite(fid, num2str(v'));        % Newline.        fwrite(fid, nl);        % Display progress of editing        disp([num2str(round(100*z/O)) '%']);    end    % Close file.    fclose(fid);end% Acknowledgments: This file was inspired by Write Cell Array Of Structs Into A Vtk Structured Grid and Write 2 D And 3 D Arrays Into% Vtk and WriteToVTK.