function coefficient_vector = hf_interpolation(data_set)    % This script makes a polynomial interpolation for a real valued 2 dimensional function, which we need to compute our    % shape functions for different degree order.    % The approximated function should be of the form f: R^2 -> R, f(x,y)=z. Our shape functions satisfy that condition.    % First we need to build a system Ax=b which we can solve to obtain the coeffictions of the resulting polynomial.    % data_set should have 3 columns. The first column represent x values, 2nd column y values.    % The 3rd column represents the value z, such that z=f(x,y).    % So data_set is a (n x 3) matrix containing supporting points for the interpolation.        % Step 1) Build matrix A    % A(i,:) = [x^0 * y^0, x^1 * y^0  , x^0 * y^1 , x^1 * y^1, ... ]     % where x =  data_set(i,1) and y = data_set(i,2).    % For the ordering of the basis of the polynomial check the documentation.    % Initialize A    A = zeros(length(data_set));        j=1;    % j represents the counter of the basis of the polynomial, so for example for j=3 we are at x^0 * y^1        level=0;     % level is a necessary helper variable to loop through the basis of the polynomial.    % Compute matrix A    while j <= length(data_set)        exponent_x=level;        exponent_y=0;        while(exponent_y < level)            for i=1:length(data_set)                A(i,j)=data_set(i,1)^(exponent_x)*data_set(i,2)^(exponent_y);            endfor            exponent_y++;            j++;        endwhile        exponent_x = 0;        exponent_y = level;        while(exponent_x < level)            for i=1:length(data_set)                A(i,j)=data_set(i,1)^(exponent_x)*data_set(i,2)^(exponent_y);            endfor            exponent_x++;            j++;        endwhile        for i=1:length(data_set)            A(i,j)=data_set(i,1)^(level)*data_set(i,2)^(level);        endfor        j++;        level++;    endwhile    % -------------------------------------------------------------------------        % Step 2) Compute right hand side    % As we already know right hand side of the system consists of the 3rd column of data_set        % Initialize right hand side    rhs = zeros(length(data_set),1);         % Assign the 3rd column of data_set to rhs     for i=1:length(data_set)        rhs(i,1) = data_set(i,3);    endfor        % Step 3) Solve linear system.    coefficient_vector = A \ rhs ;        % We want the coefficient vector as row vector.    coefficient_vector = transpose(coefficient_vector);    endfunction