function val = hf_eval_poly(x,y,Coefficients)    % x and y should be real valued numbers    % Coefficients should be a vector containing the coeffcients of the polynomial we want to evaluate    % the order of the basis of the polynomial is described in the documentation but let's make an example for the    % ordering briefly.    % level= 0 : Coefficients(1) * x^0 y^0    % level= 1 : Coefficients(2) *x^1 y^0, Coefficients(3) *x^0 y^1 ,Coefficients(4) * x^1 y^1    % level= 2 : Coefficients(5) *x^2 y^0, Coefficients(6) *x^2 y^1 ,Coefficients(7) * x^0 y^2 , Coefficients(8) *x^1 y^2 , Coefficients(9) *x^2 y^2    % and so on.        level=0;    % we start with level 0 and iterate until we are the end of Coefficients    j=1;        % row number in the Coefficients         % Initialize value of our evaluation    val=zeros(rows(x)*rows(Coefficients),rows(x));         % --------- Polynomial evaluation ---------    while j < columns(Coefficients)        exponent_x=level;        exponent_y=0;        while(exponent_y < level)            A=repmat(eye(rows(x)),size(Coefficients(:,j)),1).*kron(Coefficients(:,j),ones(rows(x),1));            B=x.^(exponent_x).*y.^(exponent_y);            val=val+A*B;            exponent_y++;            j++;        endwhile        exponent_x = 0;        exponent_y = level;        while(exponent_x < level)            A=repmat(eye(rows(x)),size(Coefficients(:,j)),1).*kron(Coefficients(:,j),ones(rows(x),1));            B=x.^(exponent_x).*y.^(exponent_y);            val=val+A*B;            exponent_x++;            j++;        endwhile        A=repmat(eye(rows(x)),size(Coefficients(:,j)),1).*kron(Coefficients(:,j),ones(rows(x),1));        B=x.^(exponent_x).*y.^(exponent_y);        val=val+A*B;        j++;        level++;    endwhile    % -----------------------------------endfunction